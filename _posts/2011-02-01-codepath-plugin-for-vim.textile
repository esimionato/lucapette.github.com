---
title: codepath plugin for vim
description: A little vim plugin for dealing with project roots
keywords: codepath, vim, plugin
category: vim
layout: blog
---
Hi everyone,

Recently I have written a plugin for "vim":http://www.vim.org, the most awesome editor ever created. It is a simple plugin but I find it extremely useful. You can find it on  "vim site":http://www.vim.org/scripts/script.php?script_id=3435 or on "github":https://github.com/lucapette/codepath.vim. I have extracted the following text from the codepath.vim documentation:  codepath.vim is a plugin that provides a simple function to obtain your code path directory if you have one. The concept is simple: I have a dir located in $HOME/code where I store all my projects and I want to set current project directory as root directory for plug-in like "NERDTree":http://www.vim.org/scripts/script.php?script_id=1658 and "FuzzyFinderTextMate":https://github.com/jamis/fuzzyfinder_textmate.

To understand better what I mean, please consider the following examples:

|File Opened|CodePath() Result|
|_codepath_/awesome-project/foo.rb|_codepath_/awesome-project|
|_codepath_/code/super-project/foo/bar.rb|_codepath_/super-project|
|/any/path/but/not/code/foo.rb|/any/path/but/not/code|

So, the CodePath Function returns the _project root_ if you open a file in any subdirectory of your codepath and returns the directory itself if you open a file in any other location. At the moment the only configuration available is the codepath directory location. You can set it in the following way:

let *g:codepath* = "/your/dir"

If you don't set *g:codepath* the codepath.vim will consider *$HOME/code* as your codepath directory. In my vim configuration (you can find it "here":https://github.com/lucapette/dotfiles), I use the CodePath function in the following way in my vimrc:

{% highlight vim %}
nnoremap <silent> <F4> :NERDTreeToggle `=CodePath()`<cr>
inoremap <silent> <F4> <Esc>:NERDTreeToggle `=CodePath()` <cr>
{% endhighlight %}

Every time I open a NERDTree window It opens itself based on my function. I did the same thing with the FuzzyFinder plugin in the following way:

{% highlight vim %}
let g:fuzzy_roots = [CodePath()]
{% endhighlight %}

I think codepath.vim is a really simple vim plugin and it is really useful for me, I hope you can use it in your vim configuration. I haven't planned new features yet but I will add the multi-codepath feature if I receive feedback on it.
